// Homework.cpp: 定义控制台应用程序的入口点。
//

#include "stdafx.h"
#include"graphics.h"
#include"conio.h"
#include"windows.h"
#include"stdlib.h"
#pragma comment(lib,"winmm.lib")
void playgame(int a[7][8],int b[7][8],int);
IMAGE wall, blank, box, people, end, dbox;//定义与地图有关的图像变量；
const int rows = 7;
const int cols = 8;//定义窗口大小
//0空地，1墙，3目的地 ，4箱子，5人;
//用矩阵初始化地图；
 int map0[7][8] = 
{ {1,1,1,1,1,1,1,1},
  {1,1,1,1,1,1,0,1},
  {1,0,3,4,0,3,0,1},
  {1,0,0,0,0,0,0,1},
  {1,0,1,1,4,1,0,1},
  {1,0,0,0,5,1,0,1},
  {1,1,1,1,1,1,1,1} };
int map1[7][8] = 
{ {0,0,0,1,1,1,0,0},
  {0,0,0,1,3,1,0,0},
  {1,1,1,1,0,1,0,0},
{1,3,4,5,4,1,1,1},
{1,1,1,4,4,0,3,1},
{0,0,1,3,1,1,1,1},
{0,0,1,1,1,0,0,0},
};
int map2[7][8] =
{ 0,0,0,1,1,1,1,1,
1,1,1,1,0,0,3,1,
1,0,0,0,4,0,0,1,
1,0,4,4,0,4,3,1,
1,1,5,1,1,3,3,1,
0,1,1,1,1,1,1,1,
0,0,0,0,0,0,0,0,
};
int map3[7][8]=
{
	0,1,1,1,1,1,0,0,
	0,1,5,0,1,1,1,0,
	0,1,0,4,0,0,1,0,
	1,1,1,0,1,0,1,1,
	1,3,1,0,1,0,0,1,
	1,3,4,0,0,1,0,1,
	1,3,0,0,0,4,0,1,
};
int map4[7][8]=
{
1,1,1,1,1,0,0,0,
0,0,0,0,1,0,0,0,
0,4,4,4,1,1,0,0,
0,3,1,0,3,1,1,1,
1,0,3,3,0,4,0,1,
1,0,5,0,0,0,0,1,
1,1,1,1,1,1,1,1,
};
int map5[7][8] =
{ 1,1,1,1,1,1,1,1,
	0,0,0,0,0,1,1,1,
	0,4,0,0,0,4,0,5,
	0,0,4,4,4,0,0,0,
	1,3,3,3,3,3,0,1,
	1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1
};
int map0rec[7][8] = { 0 };
int map1rec[7][8] = {0 };
int map2rec[7][8] = { 0 };
int map3rec[7][8] = { 0 };
int map4rec[7][8] = { 0 };
int map5rec[7][8] = { 0 };

IMAGE backing, start, ex_it, help, set,helpbac,exitc,win;//定义与地图无关的图像变量；

void map_rec()//备份游戏地图，以便游戏里复位；
{
	for (int k = 0; k < 7; k++)
	{
		for (int l = 0; l < 8; l++)
		{
			map0rec[k][l] = map0[k][l];
			//备份map;
		}

	}
	for (int k = 0; k < 7; k++)
	{
		for (int l = 0; l < 8; l++)
		{
			map1rec[k][l] = map1[k][l];
			//备份map;
		}

	}
	for (int k = 0; k < 7; k++)
	{
		for (int l = 0; l < 8; l++)
		{
			map2rec[k][l] = map2[k][l];
			//备份map;
		}

	}
	for (int k = 0; k < 7; k++)
	{
		for (int l = 0; l < 8; l++)
		{
			map3rec[k][l] = map3[k][l];
			//备份map;
		}

	}
	for (int k = 0; k < 7; k++)
	{
		for (int l = 0; l < 8; l++)
		{
			map4rec[k][l] = map4[k][l];
			//备份map;
		}

	}
	for (int k = 0; k < 7; k++)
	{
		for (int l = 0; l < 8; l++)
		{
			map5rec[k][l] = map5[k][l];
			//备份map;
		}

	}
}
//初始化游戏界面;
void InitGame(int map[][8]) {
	
	int x, y;
	for (int i = 0; i < 7; i++)
	{
		for (int j = 0; j < 8; j++)
		{
			x = j * 60;
			y = i * 60;
			switch (map[i][j])
			{
			case 0:putimage(x, y, &blank);break;                  //空地；
			case 1:putimage(x, y, &wall); break;               //墙壁；
			case 3:putimage(x, y, &end); break;                //目的地
			case 4:putimage(x, y, &box); break;                //箱子；
			case 5:putimage(x, y, &people); break;                 //人;
			case 7:putimage(x, y, &box); break;                 //箱子和目的地重合;4+3;
			case 8:putimage(x, y, &people); break;                 //人和目的地重合；5+3;
			}


		}
	}
}
//加载资源
void loading()
{

	loadimage(&blank, _T("floor.jpg"));
	loadimage(&wall, _T("wall.jpg"));
	loadimage(&end, _T("grass.jpg"));
	loadimage(&box, _T("box.jpg"));
	loadimage(&people, _T("people.jpg"));
	loadimage(&backing,_T("backing.jpg"));
	loadimage(&start,_T("start.jpg"));
	loadimage(&help, _T("help.jpg"));
	loadimage(&ex_it, _T("exit.jpg"));
	loadimage(&helpbac, _T("helpbac.jpg"));
	loadimage(&exitc, _T("exitc.jpg"));
	loadimage(&win, _T("pass.jpg"));


}

void chapter()//控制章节；
{
	
	playgame(map0, map0rec,2);//chapter0;
	playgame(map1, map1rec,4);//chapter1;
	playgame(map2, map2rec, 4);//chapter2;
	playgame(map3, map3rec, 3);//chapter3;
	playgame(map4, map4rec, 4);//chapter4;
	playgame(map5, map5rec, 5);//chapter5;
	
	putimage(0, 0, &win);
	_getch();
}
void he_lp()   //帮助；
{
	putimage(0, 0, &helpbac);
	printf("帮助\n");
	getchar();
}
void tuichu() //控制程序退出；
{
	char input;
	putimage(100,100,&exitc);
	input=_getch();
	if (input == 'y' || input == 'Y') {
		exit(0);
	}
	


}
void me_nu()//菜单选择；
{    
	char point,rec='1',point1='0';
	int count = 0,s=0;
	
	for (int i = 0;;)
	{


		putimage(0, 0, &backing);
		putimage(15, 40, &start);
		putimage(15, 120, &help);
		putimage(15, 200, &ex_it);
		//控制指针移动：
		s = 40 + (count) * 75;
		putimage(230, s, &box);
		//printf("%d\n", 40 + (count) * 75);
		s = 0;
		point1 = _getch();
		//fflush(stdin);
		point = _getch();  //方向键输入两个字符，第一个没用；
		
		if (point == 32)//判定输入空格继续;
		{
			
			if (count == 0)
			{
				chapter();
				
			}
			if (count == 1)
				he_lp();
			if (count == 2)
				tuichu();
		}
		switch (point)
		{//72 up
		case 72:
			count--;
			//printf("6661");
			break;
			//80 down
		case 80:
			if (count < 2)
			{
				count++;
			}
			//printf("6662");
			break;

		}

		//printf("%d\n", count);
		if (count < 0)
		{
			
			count = 0;
		}
	}
		
	}

//负责游戏的运行；
void playgame(int map[7][8],int maprec[7][8],int endnum) {
	
	char cUser;
	int i = 0, j = 0, counter = 0;
	//初始化地图;
	for (int k = 0; k < 7; k++)
	{
		for (int l = 0; l < 8; l++)
		{
			map[k][l] = maprec[k][l];
			
		}

	}
	
	
		
		while (1)

		{
			counter = 0;
			for (int k = 0; k < 7; k++)
			{
				for (int k1 = 0; k1 < 8; k1++)
				{
					if (map[k][k1] == 7)
					{
						counter++;


					}

				}

			}

			printf("%d\n", counter);
			if (counter == endnum)
			{
				break;
			}
			printf("%d\n", counter);

			for (i = 0; i < 7; i++)
			{
				for (j = 0; j < 8; j++)
				{
					if (map[i][j] == 5 || map[i][j] == 8)//确定人物初始位置;
						break;
				}
				if (map[i][j] == 5 || map[i][j] == 8)//确定人物初始位置;
					break;// 一个break跳出一个循环，我只要 i j
			}
			for (int k = 0; k < 7; k++)
			{
				for (int l = 0; l < 8; l++)
				{
					printf("%d", map[k][l]);
					printf("%c", 32);

				}
				printf("\n");
			}
			//printf("%d\n", i);
			//printf("%d\n", j);
			InitGame(map);
			cUser = _getch(); //来自conin;
			//printf("%c\n", cUser);
			if(cUser==27)
			{
				me_nu();
			}
			switch (cUser)
			{ //复位
			case 'O':
			case 'o':
				for (int k = 0; k < 7; k++)
				{
					for (int l = 0; l < 8; l++)
					{
						map[k][l] = maprec[k][l];
					}

				}
				break;
			

				//左边 75  <---
			case 75:
			case 'a':
			case 'A':
				//1.空地或者是目的地；
				if (map[i][j - 1] == 0 || map[i][j - 1] == 3)
				{

					map[i][j] = map[i][j] - 5;
					map[i][j - 1] = map[i][j - 1] + 5;
				} 
				//2.如果是箱子或者箱子+目的地
				if (map[i][j - 1] == 4 || map[i][j - 1] == 7)
				{
					if (map[i][j - 2] == 0 || map[i][j - 2] == 3)
					{
						map[i][j - 2] = map[i][j - 2] + 4;
						map[i][j - 1] = map[i][j - 1] + 1;
						map[i][j] -= 5;
					}
				}

				break;
				//右边 77  --->
			case 77:
			case 'd':
			case 'D':
				if (map[i][j + 1] == 0 || map[i][j + 1] == 3)
				{
					map[i][j] = map[i][j] - 5;
					map[i][j + 1] = map[i][j + 1] + 5;
				}
				if (map[i][j + 1] == 4 || map[i][j + 1] == 7)
				{
					if (map[i][j + 2] == 0 || map[i][j + 2] == 3)
					{
						map[i][j + 2] = map[i][j + 2] + 4;
						map[i][j + 1] = map[i][j + 1] + 1;
						map[i][j] -= 5;
					}
				}
				break;
				//上 up 72
			case 72:
			case 'w':
			case 'W':
				if (map[i - 1][j] == 0 || map[i - 1][j] == 3)
				{
					map[i][j] = map[i][j] - 5;
					map[i - 1][j] = map[i - 1][j] + 5;
				}
				if (map[i - 1][j] == 4 || map[i - 1][j] == 7)
				{
					if (map[i - 2][j] == 0 || map[i - 2][j] == 3)
					{
						map[i - 2][j] = map[i - 2][j] + 4;
						map[i - 1][j] = map[i - 1][j] + 1;
						map[i][j] -= 5;
					}
				}
				break;
				//下 down 80
			case 80:
			case 's':
			case 'S':
				if (map[i + 1][j] == 0 || map[i + 1][j] == 3)
				{
					map[i][j] = map[i][j] - 5;
					map[i + 1][j] = map[i + 1][j] + 5;
				}
				if (map[i + 1][j] == 4 || map[i + 1][j] == 7)
				{
					if (map[i + 2][j] == 0 || map[i + 2][j] == 3)
					{
						map[i + 2][j] = map[i + 2][j] + 4;
						map[i + 1][j] = map[i + 1][j] + 1;
						map[i][j] -= 5;
					}
				}
				break;
			}
		
		}
	}



//玩游戏

int main()
{
	initgraph(480, 420);
	PlaySound(TEXT("music.wav"), NULL, SND_ASYNC | SND_LOOP);
	map_rec();
	loading();
	me_nu();
	
	
	getchar();
	
	return 0;
}
